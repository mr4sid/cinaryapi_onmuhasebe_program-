import traceback
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime, date, timedelta # datetime.date de eklendi
import openpyxl
from openpyxl.styles import Font, Alignment, PatternFill
from reportlab.lib.pagesizes import landscape, A4
from reportlab.lib.units import cm
from reportlab.platypus import Table, TableStyle, Paragraph, SimpleDocTemplate, Spacer
from reportlab.lib import colors
from reportlab.pdfgen import canvas as rp_canvas
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
import threading
import os 

# Fontlar artÄ±k veritabani.py'den import ediliyor ve orada kaydediliyor, burada tekrar yÃ¼klemeye gerek yok.
# Sadece font isimlerini kullanacaÄŸÄ±z.
from veritabani import TURKISH_FONT_NORMAL, TURKISH_FONT_BOLD 
from reportlab.pdfbase import pdfmetrics # pdfmetrics hala gerekli

# YARDIMCI MODÃœLLERDEN GEREKENLER
from yardimcilar import sort_treeview_column, setup_date_entry, DatePickerDialog

# PENCERELER MODÃœLÃœNDEN GEREKENLER (Bu dosyadaki sÄ±nÄ±flar iÃ§in gerekli olanlar)
from pencereler import BeklemePenceresi, CariHesapEkstresiPenceresi 
from pencereler import TedarikciSecimDialog # CriticalStockWarningPenceresi iÃ§inde Ã§aÄŸrÄ±ldÄ±ÄŸÄ± iÃ§in buraya eklendi


class CriticalStockWarningPenceresi(tk.Toplevel):
    def __init__(self, parent_app, db_manager):
        super().__init__(parent_app)
        self.app = parent_app
        self.db = db_manager
        self.title("Kritik Stok UyarÄ±sÄ± ve SipariÅŸ Ã–nerisi")
        self.geometry("800x500")
        self.transient(parent_app)
        self.grab_set()

        ttk.Label(self, text="Kritik Stoktaki ÃœrÃ¼nler", font=("Segoe UI", 16, "bold")).pack(pady=10, anchor=tk.W, padx=10)

        info_frame = ttk.Frame(self, padding="10")
        info_frame.pack(fill=tk.X, padx=10)
        ttk.Label(info_frame, text="Minimum stok seviyesinin altÄ±nda olan Ã¼rÃ¼nler listelenmiÅŸtir. Ä°stenilen stok seviyesine ulaÅŸmak iÃ§in Ã¶nerilen miktarlarÄ± sipariÅŸ edebilirsiniz.").pack(anchor=tk.W)

        # Kritik Stok Listesi (Treeview)
        tree_frame = ttk.Frame(self, padding="10")
        tree_frame.pack(expand=True, fill=tk.BOTH)

        cols = ("ÃœrÃ¼n Kodu", "ÃœrÃ¼n AdÄ±", "Mevcut Stok", "Min. Stok", "Fark", "Ã–nerilen SipariÅŸ Mik.")
        self.tree = ttk.Treeview(tree_frame, columns=cols, show='headings', selectmode="none") # SeÃ§im olmasÄ±n

        col_defs = [
            ("ÃœrÃ¼n Kodu", 100, tk.W, tk.NO),
            ("ÃœrÃ¼n AdÄ±", 250, tk.W, tk.YES),
            ("Mevcut Stok", 100, tk.E, tk.NO),
            ("Min. Stok", 100, tk.E, tk.NO),
            ("Fark", 80, tk.E, tk.NO),
            ("Ã–nerilen SipariÅŸ Mik.", 150, tk.E, tk.NO)
        ]
        for cn,w,a,s in col_defs:
            self.tree.column(cn, width=w, anchor=a, stretch=s)
            self.tree.heading(cn, text=cn, command=lambda _c=cn: sort_treeview_column(self.tree, _c, False)) # SÄ±ralama eklendi

        vsb = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        vsb.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscrollcommand=vsb.set)
        self.tree.pack(expand=True, fill=tk.BOTH)
        
        self.load_critical_stock()

        # Butonlar
        button_frame = ttk.Frame(self, padding="10")
        button_frame.pack(fill=tk.X)
        ttk.Button(button_frame, text="Yenile", command=self.load_critical_stock, style="Accent.TButton").pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="SipariÅŸ OluÅŸtur", command=self._siparis_olustur_critical_stock, style="Accent.TButton").pack(side=tk.RIGHT, padx=5) 
        ttk.Button(button_frame, text="Kapat", command=self.destroy).pack(side=tk.RIGHT)

    def load_critical_stock(self):
        for i in self.tree.get_children():
            self.tree.delete(i)
        
        critical_items = self.db.get_critical_stock_items()
        if not critical_items:
            self.tree.insert("", tk.END, values=("", "", "", "", "", "Kritik Stokta ÃœrÃ¼n Bulunmuyor."))
            self.app.set_status("Kritik stokta Ã¼rÃ¼n bulunmuyor.")
            return

        for item in critical_items:
            urun_kodu = item[1]
            urun_adi = item[2]
            mevcut_stok = item[3]
            min_stok = item[7]
            fark = min_stok - mevcut_stok
            onerilen_siparis = fark 

            self.tree.insert("", tk.END, values=(
                urun_kodu,
                urun_adi,
                f"{mevcut_stok:.2f}".rstrip('0').rstrip('.'),
                f"{min_stok:.2f}".rstrip('0').rstrip('.'),
                f"{fark:.2f}".rstrip('0').rstrip('.'),
                f"{onerilen_siparis:.2f}".rstrip('0').rstrip('.')
            ))
        self.app.set_status(f"{len(critical_items)} Ã¼rÃ¼n kritik stok seviyesinin altÄ±nda.")

    def _siparis_olustur_critical_stock(self):
        """
        Kritik stoktaki Ã¼rÃ¼nleri toplar ve tedarikÃ§i seÃ§imi sonrasÄ± alÄ±ÅŸ faturasÄ± oluÅŸturma akÄ±ÅŸÄ±nÄ± baÅŸlatÄ±r.
        """
        urunler_for_siparis = []
        all_critical_items_db = self.db.get_critical_stock_items() 
        for item_db in all_critical_items_db:
            urun_id = item_db[0]
            urun_kodu_db = item_db[1]
            urun_adi_db = item_db[2] # <<-- DÃ¼zeltilen SatÄ±r
            onerilen_miktar = item_db[7] - item_db[3] 
            
            if onerilen_miktar > 0:
                urunler_for_siparis.append({
                    "id": urun_id,
                    "kodu": urun_kodu_db,
                    "adi": urun_adi_db,
                    "miktar": onerilen_miktar, 
                    "alis_fiyati_kdv_haric": item_db[4], 
                    "kdv_orani": item_db[6],   
                    "alis_fiyati_kdv_dahil": item_db[8] 
                })

        if not urunler_for_siparis:
            messagebox.showinfo("Bilgi", "SipariÅŸ oluÅŸturmak iÃ§in kritik stokta Ã¼rÃ¼n bulunmuyor.", parent=self)
            return

        # TedarikÃ§i SeÃ§im DiyaloÄŸunu aÃ§ ve callback'i _tedarikci_secildi_ve_siparis_olustur olarak ayarla
        # TedarikciSecimDialog zaten raporlar.py baÅŸÄ±nda import edildiÄŸi iÃ§in buradan kaldÄ±rdÄ±k.
        TedarikciSecimDialog(self, self.db, 
                             lambda selected_tedarikci_id, selected_tedarikci_ad: 
                             self._tedarikci_secildi_ve_siparis_olustur(selected_tedarikci_id, selected_tedarikci_ad, urunler_for_siparis))

    def _tedarikci_secildi_ve_siparis_olustur(self, tedarikci_id, tedarikci_ad, urunler_for_siparis):
        """
        TedarikÃ§i seÃ§ildikten sonra Ã§aÄŸrÄ±lÄ±r. AlÄ±ÅŸ sipariÅŸi oluÅŸturma sayfasÄ±nÄ± baÅŸlatÄ±r.
        """
        if tedarikci_id:
            self.app.tedarikci_siparisi_goster(initial_cari_id=tedarikci_id, initial_urunler=urunler_for_siparis)
            self.app.set_status(f"'{tedarikci_ad}' iÃ§in tedarikÃ§i sipariÅŸi oluÅŸturma ekranÄ± aÃ§Ä±ldÄ±.")
            self.destroy() 
        else:
            self.app.set_status("TedarikÃ§i seÃ§imi iptal edildi. SipariÅŸ oluÅŸturulmadÄ±.")
            messagebox.showwarning("Ä°ptal Edildi", "TedarikÃ§i seÃ§imi yapÄ±lmadÄ±ÄŸÄ± iÃ§in sipariÅŸ oluÅŸturma iÅŸlemi iptal edildi.", parent=self)


class NotificationDetailsPenceresi(tk.Toplevel):
    def __init__(self, parent_app, db_manager, notifications_data):
        super().__init__(parent_app)
        self.app = parent_app
        self.db = db_manager
        self.notifications_data = notifications_data 
        self.title("Aktif Bildirim DetaylarÄ±")
        self.geometry("900x600")
        self.transient(parent_app)
        self.grab_set()

        ttk.Label(self, text="Aktif Bildirim DetaylarÄ±", font=("Segoe UI", 16, "bold")).pack(pady=10, anchor=tk.W, padx=10)

        self.notebook_details = ttk.Notebook(self)
        self.notebook_details.pack(expand=True, fill=tk.BOTH, padx=10, pady=5)

        # Kritik Stok Sekmesi
        if 'critical_stock' in self.notifications_data:
            critical_stock_frame = ttk.Frame(self.notebook_details, padding="10")
            self.notebook_details.add(critical_stock_frame, text="ğŸ“¦ Kritik Stok")
            self._create_critical_stock_tab(critical_stock_frame, self.notifications_data['critical_stock'])

        # Vadesi GeÃ§miÅŸ Alacaklar Sekmesi
        if 'overdue_receivables' in self.notifications_data:
            overdue_receivables_frame = ttk.Frame(self.notebook_details, padding="10")
            self.notebook_details.add(overdue_receivables_frame, text="ğŸ’° Vadesi GeÃ§miÅŸ Alacaklar")
            self._create_overdue_receivables_tab(overdue_receivables_frame, self.notifications_data['overdue_receivables'])

        # Vadesi GeÃ§miÅŸ BorÃ§lar Sekmesi
        if 'overdue_payables' in self.notifications_data:
            overdue_payables_frame = ttk.Frame(self.notebook_details, padding="10")
            self.notebook_details.add(overdue_payables_frame, text="ğŸ’¸ Vadesi GeÃ§miÅŸ BorÃ§lar")
            self._create_overdue_payables_tab(overdue_payables_frame, self.notifications_data['overdue_payables'])

        ttk.Button(self, text="Kapat", command=self.destroy).pack(pady=10)

    def _create_critical_stock_tab(self, parent_frame, data):
        cols = ("ÃœrÃ¼n Kodu", "ÃœrÃ¼n AdÄ±", "Mevcut Stok", "Min. Stok", "Fark", "Ã–nerilen SipariÅŸ Mik.")
        self.tree = ttk.Treeview(parent_frame, columns=cols, show='headings', selectmode="none") # self.tree olarak dÃ¼zeltildi

        col_defs = [
            ("ÃœrÃ¼n Kodu", 100, tk.W, tk.NO),
            ("ÃœrÃ¼n AdÄ±", 250, tk.W, tk.YES),
            ("Mevcut Stok", 100, tk.E, tk.NO),
            ("Min. Stok", 100, tk.E, tk.NO),
            ("Fark", 80, tk.E, tk.NO),
            ("Ã–nerilen SipariÅŸ Mik.", 150, tk.E, tk.NO)
        ]
        for cn,w,a,s in col_defs:
            self.tree.column(cn, width=w, anchor=a, stretch=s) # self.tree olarak dÃ¼zelt
            self.tree.heading(cn, text=cn) # self.tree olarak dÃ¼zelt

        vsb = ttk.Scrollbar(parent_frame, orient="vertical", command=self.tree.yview) # self.tree olarak dÃ¼zelt
        vsb.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscrollcommand=vsb.set) # self.tree olarak dÃ¼zelt
        self.tree.pack(expand=True, fill=tk.BOTH) # self.tree olarak dÃ¼zelt

        for item in data:
            urun_kodu = item[1]
            urun_adi = item[2]
            mevcut_stok = item[3]
            min_stok = item[7]
            fark = min_stok - mevcut_stok
            onerilen_siparis = fark
            self.tree.insert("", tk.END, values=(
                urun_kodu, urun_adi,
                f"{mevcut_stok:.2f}".rstrip('0').rstrip('.'),
                f"{min_stok:.2f}".rstrip('0').rstrip('.'),
                f"{fark:.2f}".rstrip('0').rstrip('.'),
                f"{onerilen_siparis:.2f}".rstrip('0').rstrip('.')
            ))

    def _create_overdue_receivables_tab(self, parent_frame, data):
        cols = ("MÃ¼ÅŸteri AdÄ±", "Net BorÃ§", "Vadesi GeÃ§en GÃ¼n")
        self.tree = ttk.Treeview(parent_frame, columns=cols, show='headings', selectmode="browse") # self.tree olarak dÃ¼zeltildi

        col_defs = [
            ("MÃ¼ÅŸteri AdÄ±", 250, tk.W, tk.YES),
            ("Net BorÃ§", 120, tk.E, tk.NO),
            ("Vadesi GeÃ§en GÃ¼n", 120, tk.E, tk.NO)
        ]
        for cn,w,a,s in col_defs:
            self.tree.column(cn, width=w, anchor=a, stretch=s) # self.tree olarak dÃ¼zelt
            self.tree.heading(cn, text=cn) # self.tree olarak dÃ¼zelt

        vsb = ttk.Scrollbar(parent_frame, orient="vertical", command=self.tree.yview) # self.tree olarak dÃ¼zelt
        vsb.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscrollcommand=vsb.set) # self.tree olarak dÃ¼zelt
        self.tree.pack(expand=True, fill=tk.BOTH) # self.tree olarak dÃ¼zelt

        for item in data:
            self.tree.insert("", tk.END, values=(
                item[1], self.db._format_currency(item[2]), item[3]
            ))
        self.tree.bind("<Double-1>", lambda event: self._open_cari_ekstresi_from_notification(event, self.tree, 'MUSTERI')) # self.tree olarak dÃ¼zelt

    def _create_overdue_payables_tab(self, parent_frame, data):
        cols = ("TedarikÃ§i AdÄ±", "Net BorÃ§", "Vadesi GeÃ§en GÃ¼n")
        self.tree = ttk.Treeview(parent_frame, columns=cols, show='headings', selectmode="browse") # self.tree olarak dÃ¼zeltildi

        col_defs = [
            ("TedarikÃ§i AdÄ±", 250, tk.W, tk.YES),
            ("Net BorÃ§", 120, tk.E, tk.NO),
            ("Vadesi GeÃ§en GÃ¼n", 120, tk.E, tk.NO)
        ]
        for cn,w,a,s in col_defs:
            self.tree.column(cn, width=w, anchor=a, stretch=s) # self.tree olarak dÃ¼zelt
            self.tree.heading(cn, text=cn) # self.tree olarak dÃ¼zelt

        vsb = ttk.Scrollbar(parent_frame, orient="vertical", command=self.tree.yview) # self.tree olarak dÃ¼zelt
        vsb.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscrollcommand=vsb.set) # self.tree olarak dÃ¼zelt
        self.tree.pack(expand=True, fill=tk.BOTH) # self.tree olarak dÃ¼zelt

        for item in data:
            self.tree.insert("", tk.END, values=(
                item[1], self.db._format_currency(item[2]), item[3]
            ))
        self.tree.bind("<Double-1>", lambda event: self._open_cari_ekstresi_from_notification(event, self.tree, 'TEDARIKCI')) # self.tree olarak dÃ¼zelt

    def _open_cari_ekstresi_from_notification(self, event, tree, cari_tip):
        selected_item = tree.focus()
        if not selected_item:
            return
        
        item_values = tree.item(selected_item, 'values')
        cari_adi = item_values[0] 
        
        cari_id = None
        if cari_tip == 'MUSTERI':
            for item in self.notifications_data.get('overdue_receivables', []):
                if item[1] == cari_adi:
                    cari_id = item[0]
                    break
        elif cari_tip == 'TEDARIKCI':
            for item in self.notifications_data.get('overdue_payables', []):
                if item[1] == cari_adi:
                    cari_id = item[0]
                    break
        
        if cari_id:
            CariHesapEkstresiPenceresi(self.app, self.db, cari_id, cari_tip, cari_adi)
        else:
            messagebox.showwarning("Hata", "Cari ID bulunamadÄ±.", parent=self)