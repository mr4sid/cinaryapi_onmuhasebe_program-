import sys
import os
import logging
import traceback
from datetime import datetime, date, timedelta
import multiprocessing
import threading
import sqlite3
import shutil
# PySide6 modÃ¼lleri
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QLabel, 
    QPushButton, QTabWidget, QStatusBar, QMessageBox, QFileDialog, QSizePolicy
)
from PySide6.QtCore import Qt, QTimer # QTimer eklendi
from PySide6.QtGui import QIcon, QPixmap, QFont, QPalette, QColor

# Yerel Uygulama ModÃ¼lleri
from veritabani import OnMuhasebe
from hizmetler import FaturaService, TopluIslemService
from yardimcilar import setup_locale
from arayuz import MusteriYonetimiSayfasi, TedarikciYonetimiSayfasi, AnaSayfa, StokYonetimiSayfasi,FaturaListesiSayfasi,RaporlamaMerkeziSayfasi,GelirGiderSayfasi,FinansalIslemlerSayfasi,SiparisListesiSayfasi,KasaBankaYonetimiSayfasi
# VERÄ°TABANI VE LOG DOSYALARI Ä°Ã‡Ä°N TEMEL DÄ°ZÄ°N TANIMLAMA (ANA UYGULAMA GÄ°RÄ°Åž NOKTASI)
if getattr(sys, 'frozen', False):
    base_dir = os.path.dirname(sys.executable)
else:
    base_dir = os.path.dirname(os.path.abspath(__file__))

data_dir = os.path.join(base_dir, 'data')
if not os.path.exists(data_dir):
    os.makedirs(data_dir)

# LOGLAMA YAPILANDIRMASI (TÃœM UYGULAMA Ä°Ã‡Ä°N SADECE BURADA YAPILACAK)
log_file_path = os.path.join(data_dir, 'application.log')
logging.basicConfig(filename=log_file_path, level=logging.ERROR,
                    format='%(asctime)s - %(levelname)s - %(message)s')


# _pdf_olusturma_islemi fonksiyonu, multiprocessing kullandÄ±ÄŸÄ± iÃ§in ayrÄ± bir fonksiyon olarak kalabilir.
# Ancak PySide6'da da main thread'i bloklamamak adÄ±na thread/process kullanÄ±mÄ± Ã¶nemlidir.
def _pdf_olusturma_islemi(db_name_path, cari_tip, cari_id, bas_t, bit_t, dosya_yolu, result_queue):
    try:
        temp_db_manager = OnMuhasebe(db_name=db_name_path)
        success, message = temp_db_manager.cari_ekstresi_pdf_olustur(cari_tip, cari_id, bas_t, bit_t, dosya_yolu)
        result_queue.put((success, message))
    except Exception as e:
        error_message = f"PDF iÅŸleminde hata: {e}\n{traceback.format_exc()}"
        logging.error(error_message)
        result_queue.put((False, error_message))
    finally:
        if 'temp_db_manager' in locals() and temp_db_manager.conn:
            temp_db_manager.conn.close()

# main.py iÃ§inde PySide6 tabanlÄ± App sÄ±nÄ±fÄ±
# main.py dosyasÄ±ndaki App sÄ±nÄ±fÄ±nÄ±n iÃ§indeki __init__ metodunun GÃœNCELLENMÄ°Åž HALÄ°
class App(QMainWindow):
    def __init__(self, db_manager):
        super().__init__()
        self.db = db_manager
        
        self.pages = {} # AÃ§Ä±lan sayfalarÄ± (widget'larÄ±) saklamak iÃ§in bir sÃ¶zlÃ¼k

        self.setWindowTitle("Ã‡Ä±nar YapÄ± Ã–n Muhasebe ProgramÄ±")
        self.showMaximized()
        self.setMinimumSize(800, 600)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)

        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        self.notification_label = QLabel("")
        self.notification_label.setStyleSheet("background-color: #FFD2D2; color: red; font-weight: bold; padding: 5px;")
        self.notification_label.setAlignment(Qt.AlignCenter)
        self.notification_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.status_bar.addPermanentWidget(self.notification_label)
        self.notification_label.setVisible(False)
        
        self.login_user_and_start_main_ui((1, "admin", "admin"))

    def login_user_and_start_main_ui(self, user_info):
        self.current_user = user_info
        self.setWindowTitle(f"Ã‡Ä±nar YapÄ± Ã–n Muhasebe - HoÅŸ Geldiniz, {self.current_user[1]} ({self.current_user[2].capitalize()})")
        self.set_status_message(f"HoÅŸ geldiniz, {self.current_user[1]}")
        
        self.tab_widget = QTabWidget()
        self.tab_widget.setTabsClosable(True)
        self.tab_widget.tabCloseRequested.connect(self.close_tab)
        self.main_layout.addWidget(self.tab_widget)

        self._create_menu_bar()
        
        self.show_tab("Ana Sayfa")

    def _create_menu_bar(self):
        menu_bar = self.menuBar()

        # Dosya MenÃ¼sÃ¼
        file_menu = menu_bar.addMenu("Dosya")
        file_menu.addAction("Åžirket Bilgileri", self.show_company_info)
        file_menu.addSeparator()
        file_menu.addAction("VeritabanÄ± Yedekle", self.backup_database)
        file_menu.addAction("VeritabanÄ± Geri YÃ¼kle", self.restore_database)
        file_menu.addSeparator()
        file_menu.addAction("Ã‡Ä±kÄ±ÅŸ Yap", self.logout_and_show_login)
        file_menu.addAction("Programdan Ã‡Ä±k", self.close) # QMainWindow'un close metodu

        # YÃ¶netim MenÃ¼sÃ¼ (sadece admin ise)
        if self.current_user and self.current_user[2] == 'admin':
            admin_menu = menu_bar.addMenu("YÃ¶netim")
            admin_menu.addAction("KullanÄ±cÄ± YÃ¶netimi", self.show_user_management)
            admin_menu.addSeparator()
            admin_menu.addAction("Toplu Veri Ekle", self.show_bulk_data_import)
            admin_menu.addAction("Gelir/Gider SÄ±nÄ±flandÄ±rma YÃ¶netimi", self.show_income_expense_category_management)
            admin_menu.addAction("Veri SÄ±fÄ±rlama ve Temizleme", self.show_admin_utilities)
            admin_menu.addSeparator()
            admin_menu.addAction("Log DosyasÄ±nÄ± SÄ±fÄ±rla", self.clear_log_file_ui)
            admin_menu.addAction("VeritabanÄ±nÄ± Optimize Et", self.optimize_database_ui)
            admin_menu.addAction("Eksik Stok Hareketlerini OluÅŸtur (Tek Seferlik)", self.run_backfill_script_ui)
        
        # Raporlar MenÃ¼sÃ¼
        reports_menu = menu_bar.addMenu("Raporlar")
        reports_menu.addAction("Stok Raporu (Excel)", lambda: self.show_report_excel("Stok"))
        reports_menu.addAction("Tarihsel SatÄ±ÅŸ Raporu (Excel)", lambda: self.show_report_excel("SatÄ±ÅŸ"))
        reports_menu.addAction("Tarihsel SatÄ±ÅŸ Raporu (PDF)", lambda: self.show_report_pdf("SatÄ±ÅŸ"))
        reports_menu.addAction("Nakit AkÄ±ÅŸ Raporu", lambda: self.show_report("Nakit AkÄ±ÅŸÄ±")) # Åžimdilik placeholder
        reports_menu.addAction("KÃ¢r/Zarar Raporu", lambda: self.show_report("KÃ¢r ve Zarar")) # Åžimdilik placeholder
        reports_menu.addSeparator()
        reports_menu.addAction("Finansal Raporlar ve Analiz", lambda: self.show_report("Genel BakÄ±ÅŸ")) # QTabWidget'a yÃ¶nlendirme
        reports_menu.addSeparator()
        reports_menu.addAction("Kritik Stok UyarÄ±sÄ±", self.show_critical_stock_warning)
        reports_menu.addAction("Cari Hesap YaÅŸlandÄ±rma Raporu", lambda: self.show_report("Cari Hesaplar")) # QTabWidget'a yÃ¶nlendirme

        # HÄ±zlÄ± EriÅŸim MenÃ¼sÃ¼
        quick_access_menu = menu_bar.addMenu("HÄ±zlÄ± EriÅŸim")
        # Ã–rnek kÄ±sayollar. PySide'da kÄ±sayollar farklÄ± entegre edilir.
        quick_access_menu.addAction("Ana Sayfa", self.show_home_page)
        quick_access_menu.addAction("Yeni SatÄ±ÅŸ FaturasÄ±", lambda: self.show_invoice_form("SATIÅž"))
        quick_access_menu.addAction("Yeni AlÄ±ÅŸ FaturasÄ±", lambda: self.show_invoice_form("ALIÅž"))
        quick_access_menu.addAction("Fatura Listesi", lambda: self.show_tab("Faturalar"))
        quick_access_menu.addAction("Stok YÃ¶netimi", lambda: self.show_tab("Stok YÃ¶netimi"))
        quick_access_menu.addAction("MÃ¼ÅŸteri YÃ¶netimi", lambda: self.show_tab("MÃ¼ÅŸteri YÃ¶netimi"))
        quick_access_menu.addAction("TedarikÃ§i YÃ¶netimi", lambda: self.show_tab("TedarikÃ§i YÃ¶netimi"))
        quick_access_menu.addAction("Finansal Ä°ÅŸlemler", lambda: self.show_tab("Finansal Ä°ÅŸlemler"))
        quick_access_menu.addAction("Kasa/Banka YÃ¶netimi", lambda: self.show_tab("Kasa/Banka"))
        quick_access_menu.addAction("Yeni MÃ¼ÅŸteri SipariÅŸi", lambda: self.show_order_form("SATIÅž_SIPARIS"))
        quick_access_menu.addAction("Yeni TedarikÃ§i SipariÅŸi", lambda: self.show_order_form("ALIÅž_SIPARIS"))
        quick_access_menu.addAction("SipariÅŸ Listesi", lambda: self.show_tab("SipariÅŸ YÃ¶netimi"))


    # --- PySide6'ya Ã¶zel metotlar ---
    def set_status_message(self, message):
        self.status_bar.showMessage(message)

    def _check_critical_stock(self):
        critical_items = self.db.get_critical_stock_items()
        overdue_receivables = self.db.get_overdue_receivables()
        overdue_payables = self.db.get_overdue_payables()

        notification_messages = []
        self.current_notifications = {} # Detay penceresi iÃ§in saklanacak veriler

        if critical_items:
            notification_messages.append(f"ðŸ“¦ Kritik Stok: {len(critical_items)} Ã¼rÃ¼n!")
            self.current_notifications['critical_stock'] = critical_items

        if overdue_receivables:
            notification_messages.append(f"ðŸ’° Vadesi GeÃ§miÅŸ Alacak: {len(overdue_receivables)} mÃ¼ÅŸteri!")
            self.current_notifications['overdue_receivables'] = overdue_receivables

        if overdue_payables:
            notification_messages.append(f"ðŸ’¸ Vadesi GeÃ§miÅŸ BorÃ§: {len(overdue_payables)} tedarikÃ§i!")
            self.current_notifications['overdue_payables'] = overdue_payables

        if notification_messages:
            full_message = " | ".join(notification_messages)
            self.notification_label.setText(f"UYARI: {full_message}")
            self.notification_label.setVisible(True)
        else:
            self.notification_label.setText("")
            self.notification_label.setVisible(False)

    # --- MenÃ¼ komutlarÄ± iÃ§in placeholder metotlar (ÅŸimdilik) ---
    def show_company_info(self):
        QMessageBox.information(self, "Åžirket Bilgileri", "Åžirket Bilgileri Formu burada aÃ§Ä±lacak.")

    def backup_database(self):
        file_path, _ = QFileDialog.getSaveFileName(self, "VeritabanÄ±nÄ± Yedekle", "on_muhasebe_yedek.db_backup", "VeritabanÄ± Yedekleri (*.db_backup);;TÃ¼m Dosyalar (*)")
        if file_path:
            try:
                # Kapatma ve kopyalama iÅŸlemleri Tkinter dÄ±ÅŸÄ±na taÅŸÄ±nmalÄ± ve PySide'a uygun hale getirilmeli
                # Ã–rnek: shutil.copy2(self.db.db_name, file_path)
                # BaÅŸarÄ±lÄ± mesajÄ± PySide'da QMessageBox ile
                self.set_status_message(f"VeritabanÄ± yedeklendi: {file_path}")
                QMessageBox.information(self, "Yedekleme", f"VeritabanÄ± baÅŸarÄ±yla yedeklendi: {file_path}")
            except Exception as e:
                self.set_status_message(f"Yedekleme hatasÄ±: {e}")
                QMessageBox.critical(self, "Hata", f"Yedekleme sÄ±rasÄ±nda hata: {e}")

    def restore_database(self):
        if self.current_user is None or self.current_user[2] != 'admin':
            QMessageBox.warning(self, "Yetki HatasÄ±", "VeritabanÄ± geri yÃ¼kleme iÅŸlemi iÃ§in admin yetkisi gereklidir.")
            return

        file_path, _ = QFileDialog.getOpenFileName(self, "VeritabanÄ± YedeÄŸi SeÃ§", "", "VeritabanÄ± Yedekleri (*.db_backup *.db);;TÃ¼m Dosyalar (*)")
        if file_path:
            reply = QMessageBox.question(self, "Geri YÃ¼kleme OnayÄ±", "DÄ°KKAT!\n\nVeritabanÄ±nÄ± geri yÃ¼klemek mevcut tÃ¼m verilerinizi SEÃ‡Ä°LEN YEDEKTEKÄ° VERÄ°LERLE DEÄžÄ°ÅžTÄ°RECEKTÄ°R.\n\nBu iÅŸlem geri alÄ±namaz. Devam etmek istediÄŸinizden emin misiniz?",
                                         QMessageBox.Yes | QMessageBox.No)
            if reply == QMessageBox.Yes:
                try:
                    # Mevcut db baÄŸlantÄ±sÄ±nÄ± kapat
                    if self.db.conn:
                        self.db.conn.close()

                    # Yedek dosyayÄ± ana veritabanÄ± dosyasÄ±nÄ±n Ã¼zerine kopyala
                    shutil.copy2(file_path, self.db.db_name)

                    # Yeni baÄŸlantÄ±yÄ± kur
                    self.db.conn = sqlite3.connect(self.db.db_name)
                    self.db.conn.row_factory = sqlite3.Row
                    self.db.c = self.db.conn.cursor()
                    self.db.create_tables() # TablolarÄ± yeniden oluÅŸtur/kontrol et
                    self.db.ensure_admin_user() # Admin kullanÄ±cÄ±sÄ±nÄ±n varlÄ±ÄŸÄ±nÄ± kontrol et
                    self.db.sirket_bilgileri = self.db.sirket_bilgilerini_yukle() # Åžirket bilgilerini yeniden yÃ¼kle

                    QMessageBox.information(self, "Geri YÃ¼kleme BaÅŸarÄ±lÄ±", "VeritabanÄ± baÅŸarÄ±yla geri yÃ¼klendi.\nProgram yeniden baÅŸlatÄ±lacak.")
                    self.logout_and_show_login() # ProgramÄ± yeniden baÅŸlatmak iÃ§in giriÅŸ ekranÄ±na dÃ¶n
                except Exception as e:
                    QMessageBox.critical(self, "Geri YÃ¼kleme HatasÄ±", f"VeritabanÄ± geri yÃ¼klenirken hata: {e}")
                    # Hata durumunda baÄŸlantÄ±yÄ± tekrar kapatmak iyi bir uygulama olabilir.
                    if self.db.conn: self.db.conn.close()
                    self.db.conn = None # BaÄŸlantÄ±yÄ± None yap

    def logout_and_show_login(self):
        self.current_user = None
        self.setWindowTitle("Ã‡Ä±nar YapÄ± Ã–n Muhasebe ProgramÄ±")
        # Login ekranÄ±nÄ± burada gÃ¶sterme mantÄ±ÄŸÄ± daha sonra eklenecek.
        # Åžimdilik uygulamayÄ± yeniden baÅŸlatma gibi dÃ¼ÅŸÃ¼nebiliriz.
        QMessageBox.information(self, "Ã‡Ä±kÄ±ÅŸ YapÄ±ldÄ±", "BaÅŸarÄ±yla Ã§Ä±kÄ±ÅŸ yaptÄ±nÄ±z. Uygulama yeniden baÅŸlatÄ±lÄ±yor.")
        QApplication.quit() # UygulamayÄ± kapatÄ±p tekrar Ã§alÄ±ÅŸtÄ±rmasÄ±nÄ± bekleyeceÄŸiz.

    def show_user_management(self):
        if self.current_user is None or self.current_user[2] != 'admin':
            QMessageBox.warning(self, "Yetki HatasÄ±", "Bu iÅŸlem iÃ§in admin yetkisine sahip olmalÄ±sÄ±nÄ±z.")
            return
        QMessageBox.information(self, "KullanÄ±cÄ± YÃ¶netimi", "KullanÄ±cÄ± YÃ¶netimi penceresi burada aÃ§Ä±lacak.")

    def show_bulk_data_import(self):
        if self.current_user is None or self.current_user[2] != 'admin':
            QMessageBox.warning(self, "Yetki HatasÄ±", "Bu iÅŸlem iÃ§in admin yetkisine sahip olmalÄ±sÄ±nÄ±z.")
            return
        QMessageBox.information(self, "Toplu Veri Ekle", "Toplu Veri Ekleme penceresi burada aÃ§Ä±lacak.")

    def show_income_expense_category_management(self):
        QMessageBox.information(self, "Gelir/Gider SÄ±nÄ±flandÄ±rma", "Gelir/Gider SÄ±nÄ±flandÄ±rma YÃ¶netimi penceresi burada aÃ§Ä±lacak.")

    def show_admin_utilities(self):
        if self.current_user is None or self.current_user[2] != 'admin':
            QMessageBox.warning(self, "Yetki HatasÄ±", "Bu iÅŸlem iÃ§in admin yetkisine sahip olmalÄ±sÄ±nÄ±z.")
            return
        QMessageBox.information(self, "YÃ¶netici AyarlarÄ±", "Veri SÄ±fÄ±rlama ve Temizleme penceresi burada aÃ§Ä±lacak.")

    def clear_log_file_ui(self):
        if self.current_user is None or self.current_user[2] != 'admin':
            QMessageBox.warning(self, "Yetki Gerekli", "LoglarÄ± sÄ±fÄ±rlama iÅŸlemi iÃ§in admin yetkisi gereklidir.")
            return
        reply = QMessageBox.question(self, "LoglarÄ± SÄ±fÄ±rla OnayÄ±", "Log dosyasÄ±nÄ±n iÃ§eriÄŸini sÄ±fÄ±rlamak istediÄŸinizden emin misiniz?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            success, message = self.db.clear_log_file()
            if success:
                QMessageBox.information(self, "BaÅŸarÄ±lÄ±", message)
                self.set_status_message(message)
            else:
                QMessageBox.critical(self, "Hata", message)
                self.set_status_message(f"LoglarÄ± sÄ±fÄ±rlama baÅŸarÄ±sÄ±z: {message}")

    def optimize_database_ui(self):
        if self.current_user is None or self.current_user[2] != 'admin':
            QMessageBox.warning(self, "Yetki Gerekli", "VeritabanÄ± optimizasyonu iÃ§in admin yetkisi gereklidir.")
            return
        reply = QMessageBox.question(self, "VeritabanÄ± Optimizasyonu", "VeritabanÄ± dosya boyutunu kÃ¼Ã§Ã¼ltmek ve performansÄ± artÄ±rmak iÃ§in optimize edilsin mi?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            success, message = self.db.optimize_database()
            if success:
                QMessageBox.information(self, "BaÅŸarÄ±lÄ±", message)
                self.set_status_message(message)
            else:
                QMessageBox.critical(self, "Hata", message)
                self.set_status_message(f"VeritabanÄ± optimizasyonu baÅŸarÄ±sÄ±z: {message}")

    def run_backfill_script_ui(self):
        if self.current_user is None or self.current_user[2] != 'admin':
            QMessageBox.warning(self, "Yetki Gerekli", "Bu iÅŸlem iÃ§in admin yetkisi gereklidir.")
            return
        reply = QMessageBox.question(self, "Onay Gerekli", "Bu iÅŸlem, geÃ§miÅŸ tÃ¼m faturalarÄ± tarayarak eksik stok hareketlerini yeniden oluÅŸturacaktÄ±r.\n\nNOT: Bu iÅŸlem mevcut fatura kaynaklÄ± tÃ¼m stok hareketlerini silip yeniden oluÅŸturur. Sadece bir kez Ã§alÄ±ÅŸtÄ±rmanÄ±z yeterlidir.\n\nDevam etmek istiyor musunuz?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.set_status_message("GeÃ§miÅŸ veriler iÅŸleniyor, lÃ¼tfen bekleyiniz...")
            # Arka planda Ã§alÄ±ÅŸacak iÅŸlem iÃ§in threading kullanacaÄŸÄ±z
            threading.Thread(target=self._run_backfill_threaded).start()
        else:
            self.set_status_message("Ä°ÅŸlem kullanÄ±cÄ± tarafÄ±ndan iptal edildi.")

    def _run_backfill_threaded(self):
        success, message = self.db.geriye_donuk_stok_hareketlerini_olustur()
        # UI gÃ¼ncellemeleri iÃ§in ana thread'e geri dÃ¶nmeliyiz
        self.statusBar().showMessage(message) # PyQt'de doÄŸrudan eriÅŸim
        if success:
            QMessageBox.information(self, "BaÅŸarÄ±lÄ±", message)
        else:
            QMessageBox.critical(self, "Hata", message)

    def show_report_excel(self, report_type):
        QMessageBox.information(self, "Raporlama", f"{report_type} Raporu (Excel) burada oluÅŸturulacak.")

    def show_report_pdf(self, report_type):
        QMessageBox.information(self, "Raporlama", f"{report_type} Raporu (PDF) burada oluÅŸturulacak.")

    def show_report(self, tab_name):
        QMessageBox.information(self, "Raporlama", f"Raporlama Merkezi aÃ§Ä±lacak ve '{tab_name}' sekmesine gidilecek.")

    def show_critical_stock_warning(self):
        # CriticalStockWarningPenceresi'nin PySide6 versiyonu burada Ã§aÄŸrÄ±lacak.
        # Åžimdilik bir mesaj kutusu gÃ¶sterelim.
        QMessageBox.information(self, "Kritik Stok UyarÄ±sÄ±", "Kritik Stok UyarÄ±sÄ± penceresi burada aÃ§Ä±lacak.")

    def show_home_page(self):
        self.set_status_message("Ana Sayfa gÃ¶steriliyor.")

    def show_invoice_form(self, invoice_type):
        QMessageBox.information(self, "Fatura OluÅŸtur", f"Yeni {invoice_type} faturasÄ± formu burada aÃ§Ä±lacak.")

    def show_tab(self, page_name: str):
        if page_name in self.pages:
            # EÄŸer sayfa zaten aÃ§Ä±ksa, o sekmeye geÃ§
            self.tab_widget.setCurrentWidget(self.pages[page_name])
            return

        widget = None
        if page_name == "Ana Sayfa":
            widget = AnaSayfa(self, self.db, self)
        elif page_name == "Stok YÃ¶netimi":
            widget = StokYonetimiSayfasi(self, self.db, self)
        elif page_name == "MÃ¼ÅŸteri YÃ¶netimi":
            widget = MusteriYonetimiSayfasi(self, self.db, self)
        elif page_name == "TedarikÃ§i YÃ¶netimi":
            widget = TedarikciYonetimiSayfasi(self, self.db, self)
        elif page_name == "Kasa/Banka":
            widget = KasaBankaYonetimiSayfasi(self, self.db, self)
        elif page_name == "Faturalar":
            widget = FaturaListesiSayfasi(self, self.db, self)
        elif page_name == "SipariÅŸ YÃ¶netimi":
            widget = SiparisListesiSayfasi(self, self.db, self)
        elif page_name == "Finansal Ä°ÅŸlemler":
            widget = FinansalIslemlerSayfasi(self, self.db, self)
        elif page_name == "Gelir/Gider":
            widget = GelirGiderSayfasi(self, self.db, self)
        elif page_name == "Raporlama Merkezi":
            widget = RaporlamaMerkeziSayfasi(self, self.db, self)

        if widget:
            self.pages[page_name] = widget
            index = self.tab_widget.addTab(widget, page_name)
            self.tab_widget.setCurrentIndex(index)
            # Sayfa yÃ¼klendikten sonra listeyi yenileme (eÄŸer varsa)
            if hasattr(widget, 'stok_listesini_yenile'):
                widget.stok_listesini_yenile()
            elif hasattr(widget, 'musteri_listesini_yenile'):
                widget.musteri_listesini_yenile()
            elif hasattr(widget, 'tedarikci_listesini_yenile'):
                widget.tedarikci_listesini_yenile()
            elif hasattr(widget, 'hesap_listesini_yenile'):
                widget.hesap_listesini_yenile()
            elif hasattr(widget, 'fatura_listesini_yukle'):
                widget.fatura_listesini_yukle()
            elif hasattr(widget, 'siparis_listesini_yukle'):
                widget.siparis_listesini_yukle()
            elif hasattr(widget, 'gg_listesini_yukle'):
                widget.gg_listesini_yukle()
            elif hasattr(widget, 'raporu_olustur_ve_yenile'):
                widget.raporu_olustur_ve_yenile()
            
            # self.app.set_status_message yerine doÄŸrudan self.set_status_message kullan
            self.set_status_message(f"'{page_name}' sekmesi aÃ§Ä±ldÄ±.") # <-- BurasÄ± gÃ¼ncellendi
        else:
            QMessageBox.information(self, "Sekme DeÄŸiÅŸtir", f"'{page_name}' sekmesi henÃ¼z programa eklenmedi.")
            # self.app.set_status_message yerine doÄŸrudan self.set_status_message kullan
            self.set_status_message(f"Hata: '{page_name}' sekmesi aÃ§Ä±lamadÄ±.") # <-- BurasÄ± gÃ¼ncellendi


    def close_tab(self, index):
        widget = self.tab_widget.widget(index)
        if widget is not None:
            page_name = self.tab_widget.tabText(index)
            if page_name in self.pages:
                del self.pages[page_name]
            widget.deleteLater()
            self.tab_widget.removeTab(index)

    def show_order_form(self, order_type):
        QMessageBox.information(self, "SipariÅŸ OluÅŸtur", f"Yeni {order_type} sipariÅŸ formu burada aÃ§Ä±lacak.")

    def show_notification_details(self, event=None):
        if not hasattr(self, 'current_notifications') or not self.current_notifications:
            QMessageBox.information(self, "Bildirim DetaylarÄ±", "Åžu anda aktif bir bildirim bulunmuyor.")
            return
        # NotificationDetailsPenceresi'nin PySide6 versiyonu burada Ã§aÄŸrÄ±lacak.
        # Åžimdilik bir mesaj kutusu gÃ¶sterelim.
        QMessageBox.information(self, "Bildirim DetaylarÄ±", "Bildirim detaylarÄ± penceresi burada aÃ§Ä±lacak.")


if __name__ == "__main__":
    setup_locale() 
    
    app = QApplication(sys.argv)
    
    # --- GÃœNCELLENMÄ°Åž: Beyaz Tema AyarlarÄ± ---
    app.setStyle("Fusion")

    # Yeni, Ã¶zel bir beyaz palet oluÅŸturuyoruz
    beyaz_palet = QPalette()

    # Pencere arka planlarÄ± iÃ§in renkleri ayarla
    beyaz_palet.setColor(QPalette.ColorRole.Window, QColor(255, 255, 255))        # Ana pencere arka planÄ± (beyaz)
    beyaz_palet.setColor(QPalette.ColorRole.WindowText, QColor(0, 0, 0))            # Ana yazÄ± rengi (siyah)
    
    # YazÄ± giriÅŸ alanlarÄ± (QLineEdit, QTextEdit vb.) iÃ§in renkleri ayarla
    beyaz_palet.setColor(QPalette.ColorRole.Base, QColor(255, 255, 255))           # Entry arka planÄ± (beyaz)
    beyaz_palet.setColor(QPalette.ColorRole.Text, QColor(0, 0, 0))                 # Entry yazÄ± rengi (siyah)
    beyaz_palet.setColor(QPalette.ColorRole.PlaceholderText, QColor(120, 120, 120)) # Placeholder yazÄ± rengi (gri)

    # Butonlar ve diÄŸer arayÃ¼z elemanlarÄ± iÃ§in renkleri ayarla
    beyaz_palet.setColor(QPalette.ColorRole.Button, QColor(240, 240, 240))         # Buton arka planÄ± (hafif gri)
    beyaz_palet.setColor(QPalette.ColorRole.ButtonText, QColor(0, 0, 0))           # Buton yazÄ± rengi (siyah)
    
    # Vurgu rengi (Ã¶rneÄŸin seÃ§ili Ã¶ÄŸeler iÃ§in)
    beyaz_palet.setColor(QPalette.ColorRole.Highlight, QColor(0, 120, 215))       # Standart mavi
    beyaz_palet.setColor(QPalette.ColorRole.HighlightedText, QColor(255, 255, 255)) # Vurgulu yazÄ± (beyaz)

    # Uygulamaya yeni paletimizi tanÄ±tÄ±yoruz
    app.setPalette(beyaz_palet)
    # --- DEÄžÄ°ÅžÄ°KLÄ°K SONU ---
    
    # Kodun geri kalanÄ± aynÄ±
    db_manager = OnMuhasebe(data_dir=data_dir)
    
    main_app_window = App(db_manager=db_manager)
    main_app_window.show() 
    
    sys.exit(app.exec())